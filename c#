//QUESTION 1

using System;

class ElectricityBillCalculator
{
    static void Main()
    {
        Console.Write("Enter total units used: ");
        string inputUnits = Console.ReadLine();
        int unitCount = int.Parse(inputUnits);

        const int RATE_TIER1 = 5;
        const int RATE_TIER2 = 7;
        const int RATE_TIER3 = 10;

        int billAmount = 0;

        if (unitCount <= 100)
        {
            billAmount = unitCount * RATE_TIER1;
        }
        else if (unitCount <= 200)
        {
            billAmount = (100 * RATE_TIER1) + ((unitCount - 100) * RATE_TIER2);
        }
        else
        {
            billAmount = (100 * RATE_TIER1) + (100 * RATE_TIER2) + ((unitCount - 200) * RATE_TIER3);
        }

        billAmount = Math.Abs(billAmount);

        Console.WriteLine("Your electricity bill is: $" + billAmount);
    }
}



//QUESTION 2

using System;

class MeterCustomer
{
    public int Id { get; set; }
    public string FullName { get; set; }
    public int UnitsUsed { get; set; }

    public MeterCustomer(int customerId, string customerName, int usage)
    {
        Id = customerId;
        FullName = customerName;
        UnitsUsed = usage;
    }

    public void PrintBill()
    {
        int unitRate = 5;
        int totalAmount = UnitsUsed * unitRate;

        Console.WriteLine($"Customer Name: {FullName} (ID: {Id})");
        Console.WriteLine($"Units Used: {UnitsUsed}");
        Console.WriteLine($"Total Payable: ${totalAmount}");
    }
}

class Program
{
    static void Main()
    {
        Console.Write("Enter Customer ID: ");
        int custId = int.Parse(Console.ReadLine());

        Console.Write("Enter Customer Name: ");
        string custName = Console.ReadLine();

        Console.Write("Enter Units Used: ");
        int usage = int.Parse(Console.ReadLine());

        MeterCustomer customer = new MeterCustomer(custId, custName, usage);
        customer.PrintBill();
    }
}


//QUESTION 3


using System;

class WeeklyConsumptionStats
{
    enum WeekDays { Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday }

    public void ShowStatistics(int[] dailyUsage)
    {
        int totalUnits = 0;
        int maxUsage = dailyUsage[0];
        int peakDayIndex = 0;

        for (int i = 0; i < dailyUsage.Length; i++)
        {
            totalUnits += dailyUsage[i];

            if (dailyUsage[i] > maxUsage)
            {
                maxUsage = dailyUsage[i];
                peakDayIndex = i;
            }
        }

        double avgUnits = (double)totalUnits / dailyUsage.Length;

        Console.WriteLine($"Weekly Total: {totalUnits} units");
        Console.WriteLine($"Average per day: {avgUnits:F2} units");
        Console.WriteLine($"Peak usage on: {((WeekDays)peakDayIndex)} ({maxUsage} units)");
    }

    static void Main()
    {
        int[] consumption = new int[7];

        Console.WriteLine("Enter units used for each day (Mon to Sun):");

        for (int i = 0; i < consumption.Length; i++)
        {
            consumption[i] = int.Parse(Console.ReadLine());
        }

        WeeklyConsumptionStats stats = new WeeklyConsumptionStats();
        stats.ShowStatistics(consumption);
    }
}


//Question 4

using System;

class SmartMeter
{
    public int MeterId { get; set; }
    public string CustomerName { get; set; }

    public SmartMeter(int meterId, string customerName)
    {
        MeterId = meterId;
        CustomerName = customerName;
    }
}

class ResidentialMeter : SmartMeter
{
    public string HouseType { get; set; }

    public ResidentialMeter(int meterId, string customerName, string houseType)
        : base(meterId, customerName)
    {
        HouseType = houseType;
    }

    public void PrintDetails()
    {
        Console.WriteLine($"Residential Meter -> ID: {MeterId}, Name: {CustomerName}, HouseType: {HouseType}");
    }
}

class CommercialMeter : SmartMeter
{
    public string BusinessType { get; set; }

    public CommercialMeter(int meterId, string customerName, string businessType)
        : base(meterId, customerName)
    {
        BusinessType = businessType;
    }

    public void PrintDetails()
    {
        Console.WriteLine($"Commercial Meter -> ID: {MeterId}, Name: {CustomerName}, BusinessType: {BusinessType}");
    }
}

class Program
{
    static void Main()
    {
        ResidentialMeter rMeter = new ResidentialMeter(201, "Alice", "Apartment");
        CommercialMeter cMeter = new CommercialMeter(301, "Bob", "Shop");

        rMeter.PrintDetails();
        cMeter.PrintDetails();
    }
}



//QUESTION 5

using System;

public class SmartMeterAccount
{
    private int balance;

    public void Recharge(int amount)
    {
        balance += amount;
        Console.WriteLine("Balance after recharge: " + balance);
    }

    public void Consume(int amount)
    {
        if (amount <= balance)
        {
            balance -= amount;
            Console.WriteLine("Balance after consumption: " + balance);
        }
        else
        {
            Console.WriteLine("Insufficient balance");
        }
    }
}

class Program
{
    static void Main()
    {
        SmartMeterAccount account = new SmartMeterAccount();
        account.Recharge(500);
        account.Consume(200);
        account.Consume(400);
    }
}


//QUESTION 6

using System;

public abstract class MeterReading
{
    public abstract int CalculateBill(int units);
}

public class ResidentialReading : MeterReading
{
    public override int CalculateBill(int units)
    {
        return units * 5;
    }
}

public class CommercialReading : MeterReading
{
    public override int CalculateBill(int units)
    {
        return units * 8;
    }
}

class Program
{
    static void Main()
    {
        MeterReading residential = new ResidentialReading();
        MeterReading commercial = new CommercialReading();

        int resBill = residential.CalculateBill(100);
        int comBill = commercial.CalculateBill(100);

        Console.WriteLine("Residential Bill = " + resBill);
        Console.WriteLine("Commercial Bill = " + comBill);
    }
}


