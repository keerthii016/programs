//QUESTION 1

using System;

class ElectricityBillCalculator
{
    static void Main()
    {
        Console.Write("Enter total units used: ");
        string inputUnits = Console.ReadLine();
        int unitCount = int.Parse(inputUnits);

        const int RATE_TIER1 = 5;
        const int RATE_TIER2 = 7;
        const int RATE_TIER3 = 10;

        int billAmount = 0;

        if (unitCount <= 100)
        {
            billAmount = unitCount * RATE_TIER1;
        }
        else if (unitCount <= 200)
        {
            billAmount = (100 * RATE_TIER1) + ((unitCount - 100) * RATE_TIER2);
        }
        else
        {
            billAmount = (100 * RATE_TIER1) + (100 * RATE_TIER2) + ((unitCount - 200) * RATE_TIER3);
        }

        billAmount = Math.Abs(billAmount);

        Console.WriteLine("Your electricity bill is: $" + billAmount);
    }
}



//QUESTION 2

using System;

class MeterCustomer
{
    public int Id { get; set; }
    public string FullName { get; set; }
    public int UnitsUsed { get; set; }

    public MeterCustomer(int customerId, string customerName, int usage)
    {
        Id = customerId;
        FullName = customerName;
        UnitsUsed = usage;
    }

    public void PrintBill()
    {
        int unitRate = 5;
        int totalAmount = UnitsUsed * unitRate;

        Console.WriteLine($"Customer Name: {FullName} (ID: {Id})");
        Console.WriteLine($"Units Used: {UnitsUsed}");
        Console.WriteLine($"Total Payable: ${totalAmount}");
    }
}

class Program
{
    static void Main()
    {
        Console.Write("Enter Customer ID: ");
        int custId = int.Parse(Console.ReadLine());

        Console.Write("Enter Customer Name: ");
        string custName = Console.ReadLine();

        Console.Write("Enter Units Used: ");
        int usage = int.Parse(Console.ReadLine());

        MeterCustomer customer = new MeterCustomer(custId, custName, usage);
        customer.PrintBill();
    }
}


//QUESTION 3


using System;

class WeeklyConsumptionStats
{
    enum WeekDays { Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday }

    public void ShowStatistics(int[] dailyUsage)
    {
        int totalUnits = 0;
        int maxUsage = dailyUsage[0];
        int peakDayIndex = 0;

        for (int i = 0; i < dailyUsage.Length; i++)
        {
            totalUnits += dailyUsage[i];

            if (dailyUsage[i] > maxUsage)
            {
                maxUsage = dailyUsage[i];
                peakDayIndex = i;
            }
        }

        double avgUnits = (double)totalUnits / dailyUsage.Length;

        Console.WriteLine($"Weekly Total: {totalUnits} units");
        Console.WriteLine($"Average per day: {avgUnits:F2} units");
        Console.WriteLine($"Peak usage on: {((WeekDays)peakDayIndex)} ({maxUsage} units)");
    }

    static void Main()
    {
        int[] consumption = new int[7];

        Console.WriteLine("Enter units used for each day (Mon to Sun):");

        for (int i = 0; i < consumption.Length; i++)
        {
            consumption[i] = int.Parse(Console.ReadLine());
        }

        WeeklyConsumptionStats stats = new WeeklyConsumptionStats();
        stats.ShowStatistics(consumption);
    }
}


//Question 4

using System;

class SmartMeter
{
    public int MeterId { get; set; }
    public string CustomerName { get; set; }

    public SmartMeter(int meterId, string customerName)
    {
        MeterId = meterId;
        CustomerName = customerName;
    }
}

class ResidentialMeter : SmartMeter
{
    public string HouseType { get; set; }

    public ResidentialMeter(int meterId, string customerName, string houseType)
        : base(meterId, customerName)
    {
        HouseType = houseType;
    }

    public void PrintDetails()
    {
        Console.WriteLine($"Residential Meter -> ID: {MeterId}, Name: {CustomerName}, HouseType: {HouseType}");
    }
}

class CommercialMeter : SmartMeter
{
    public string BusinessType { get; set; }

    public CommercialMeter(int meterId, string customerName, string businessType)
        : base(meterId, customerName)
    {
        BusinessType = businessType;
    }

    public void PrintDetails()
    {
        Console.WriteLine($"Commercial Meter -> ID: {MeterId}, Name: {CustomerName}, BusinessType: {BusinessType}");
    }
}

class Program
{
    static void Main()
    {
        ResidentialMeter rMeter = new ResidentialMeter(201, "Alice", "Apartment");
        CommercialMeter cMeter = new CommercialMeter(301, "Bob", "Shop");

        rMeter.PrintDetails();
        cMeter.PrintDetails();
    }
}



//QUESTION 5

using System;

public class SmartMeterAccount
{
    private int balance;

    public void Recharge(int amount)
    {
        balance += amount;
        Console.WriteLine("Balance after recharge: " + balance);
    }

    public void Consume(int amount)
    {
        if (amount <= balance)
        {
            balance -= amount;
            Console.WriteLine("Balance after consumption: " + balance);
        }
        else
        {
            Console.WriteLine("Insufficient balance");
        }
    }
}

class Program
{
    static void Main()
    {
        SmartMeterAccount account = new SmartMeterAccount();
        account.Recharge(500);
        account.Consume(200);
        account.Consume(400);
    }
}


//QUESTION 6

using System;

public abstract class MeterReading
{
    public abstract int CalculateBill(int units);
}

public class ResidentialReading : MeterReading
{
    public override int CalculateBill(int units)
    {
        return units * 5;
    }
}

public class CommercialReading : MeterReading
{
    public override int CalculateBill(int units)
    {
        return units * 8;
    }
}

class Program
{
    static void Main()
    {
        MeterReading residential = new ResidentialReading();
        MeterReading commercial = new CommercialReading();

        int resBill = residential.CalculateBill(100);
        int comBill = commercial.CalculateBill(100);

        Console.WriteLine("Residential Bill = " + resBill);
        Console.WriteLine("Commercial Bill = " + comBill);
    }
}


//QUESTION 7

using System;
using System.Collections.Generic;

class Program
{
    static void Main()
    {
       
        List<List<int>> weeklyReadings = new List<List<int>>
        {
            new List<int> { 10, 15, 20 }, // Day 1
            new List<int> { 12, 14, 22 }, // Day 2
            new List<int> { 11, 16, 25 }, // Day 3
            new List<int> { 13, 15, 24 },
            new List<int> { 14, 18, 26 },
            new List<int> { 15, 19, 23 },
            new List<int> { 16, 20, 27 }
        };

        Console.WriteLine("Night Reading on Day 3: " + weeklyReadings[2][2]);

       
        Dictionary<string, Dictionary<string, List<int>>> areaData = new Dictionary<string, Dictionary<string, List<int>>>
        {
            {
                "Area1", new Dictionary<string, List<int>>
                {
                    { "House1", new List<int> { 10, 12, 14, 16, 18, 20, 22 } },
                    { "House2", new List<int> { 9, 11, 13, 15, 17, 19, 21 } }
                }
            }
        };

        Console.WriteLine("\nReadings for Area1 -> House1:");
        foreach (var reading in areaData["Area1"]["House1"])
        {
            Console.Write(reading + " ");
        }
        Console.WriteLine();

        
        Dictionary<string, List<string>> areaMeters = new Dictionary<string, List<string>>
        {
            { "Downtown", new List<string> { "MTR001", "MTR002", "MTR003" } },
            { "Uptown", new List<string> { "MTR101", "MTR102" } }
        };

        Console.WriteLine("\nMeters in Downtown:");
        foreach (var meter in areaMeters["Downtown"])
        {
            Console.WriteLine(meter);
        }

        List<Dictionary<string, string>> complaints = new List<Dictionary<string, string>>
        {
            new Dictionary<string, string> { { "MeterNum", "MTR001" }, { "Issue", "No Reading" }, { "Date", "2025-08-28" } },
            new Dictionary<string, string> { { "MeterNum", "MTR002" }, { "Issue", "Overbilling" }, { "Date", "2025-08-27" } }
        };

        Console.WriteLine("\nComplaints:");
        foreach (var complaint in complaints)
        {
            Console.WriteLine($"Meter: {complaint["MeterNum"]}, Issue: {complaint["Issue"]}, Date: {complaint["Date"]}");
        }
    }
}


//QUESTION 8

using System;
using System.Collections.Generic;


enum MeterStatus { Active, Inactive, Fault }


struct Reading
{
    public DateTime Date;
    public int Units;

    public Reading(DateTime date, int units)
    {
        Date = date;
        Units = units;
    }
}


abstract class Notifier
{
    public abstract void SendMessage(string msg);
}

class SmsNotifier : Notifier
{
    public override void SendMessage(string msg)
    {
        Console.WriteLine("SMS Sent: " + msg);
    }
}

class EmailNotifier : Notifier
{
    public override void SendMessage(string msg)
    {
        Console.WriteLine("Email Sent: " + msg);
    }
}


class Meter
{
    public event Action<string> OnNewReadingAdded;
    public MeterStatus Status { get; set; }

    public List<Reading> Readings { get; } = new List<Reading>();

    public void AddReading(Reading reading)
    {
        Readings.Add(reading);
        OnNewReadingAdded?.Invoke($"New reading added: {reading.Units} units on {reading.Date.ToShortDateString()}");
    }

   
    public class ReadingHistory
    {
        public List<Reading> AllReadings = new List<Reading>();
    }
}


class Customer
{
    public string Name { get; set; }
    public string? Email { get; set; }
    public string Phone { get; set; }

    public Notifier GetNotifier()
    {
        return Email != null ? new EmailNotifier() : new SmsNotifier();
    }
}


static class Tariff
{
    public static int RatePerUnit = 6;
}


sealed class BillCalculator
{
    public static int CalculateBill(List<Reading> readings)
    {
        int totalUnits = 0;
        foreach (var r in readings)
            totalUnits += r.Units;

        return totalUnits * Tariff.RatePerUnit;
    }
}

class Program
{
    static void Main()
    {
        
        Customer customer1 = new Customer { Name = "Alice", Email = null, Phone = "1234567890" };
        var notifier1 = customer1.GetNotifier();

        
        Meter meter = new Meter { Status = MeterStatus.Active };

      
        meter.OnNewReadingAdded += (msg) =>
        {
            notifier1.SendMessage(msg);
        };

        
        meter.AddReading(new Reading(DateTime.Now.AddDays(-1), 20));
        meter.AddReading(new Reading(DateTime.Now, 30));

        
        int bill = BillCalculator.CalculateBill(meter.Readings);
        Console.WriteLine("\nGenerated Bill: $" + bill);
    }
}


//QUESTION 9

using System;
using System.Collections.Generic;
using System.Linq;

namespace SimpleElectricityBilling
{
    // 1. Enum
    public enum MeterStatus
    {
        Active,
        Inactive,
        Fault
    }

    // 2. Struct
    public struct Reading
    {
        public DateTime Date;
        public int Units;

        public Reading(DateTime date, int units)
        {
            Date = date;
            Units = units;
        }
    }

    // 3. Abstract class and its derived classes
    public abstract class Notifier
    {
        public abstract void SendMessage(string message);
    }

    public class SmsNotifier : Notifier
    {
        private string phone;

        public SmsNotifier(string phone)
        {
            this.phone = phone;
        }

        public override void SendMessage(string message)
        {
            Console.WriteLine($"[SMS to {phone}]: {message}");
        }
    }

    public class EmailNotifier : Notifier
    {
        private string email;

        public EmailNotifier(string email)
        {
            this.email = email;
        }

        public override void SendMessage(string message)
        {
            Console.WriteLine($"[Email to {email}]: {message}");
        }
    }

    // 6. Static class for tariff
    public static class Tariff
    {
        public static decimal RatePerUnit = 6.0m;
    }

    // 7. Sealed class for bill calculation
    public sealed class BillCalculator
    {
        public decimal Calculate(List<Reading> readings)
        {
            int totalUnits = readings.Sum(r => r.Units);
            return totalUnits * Tariff.RatePerUnit;
        }
    }

    // 8. Partial class: Profile and Contact
    public partial class Customer
    {
        public int Id { get; set; }
        public string Name { get; set; }

        public Customer(int id, string name)
        {
            Id = id;
            Name = name;
        }
    }

    public partial class Customer
    {
        public string? Email { get; set; }
        public string? Phone { get; set; }

        // 5. Null-coalescing usage
        public Notifier GetNotifier()
        {
            return Email != null ? new EmailNotifier(Email) : new SmsNotifier(Phone ?? "Unknown");
        }
    }

    // 4. Event + 9. Nested class
    public class Meter
    {
        public int MeterId { get; set; }
        public MeterStatus Status { get; set; }
        public Customer Owner { get; set; }
        private List<Reading> readings = new List<Reading>();

        // Event triggered on new reading
        public event Action<Reading>? ReadingAdded;

        public Meter(int meterId, Customer owner)
        {
            MeterId = meterId;
            Owner = owner;
            Status = MeterStatus.Active;
        }

        public void AddReading(Reading reading)
        {
            readings.Add(reading);
            ReadingAdded?.Invoke(reading); // Trigger event
        }

        public List<Reading> GetReadings() => readings;

        // Nested class
        public class ReadingHistory
        {
            public static void Show(List<Reading> readings)
            {
                Console.WriteLine("\n--- Reading History ---");
                foreach (var r in readings)
                {
                    Console.WriteLine($"Date: {r.Date.ToShortDateString()}, Units: {r.Units}");
                }
            }
        }
    }

    // Main Program
    class Program
    {
        static void Main()
        {
            Console.WriteLine("=== Electricity Billing System ===\n");

            // Create a customer with phone but no email
            Customer customer = new Customer(1, "Alice")
            {
                Phone = "9876543210"
            };

            // Create a meter and attach event handler
            Meter meter = new Meter(1001, customer);
            meter.ReadingAdded += (reading) =>
            {
                var notifier = customer.GetNotifier();
                notifier.SendMessage($"Reading added: {reading.Units} units on {reading.Date.ToShortDateString()}");
            };

            // Add readings
            meter.AddReading(new Reading(DateTime.Now.AddDays(-2), 50));
            meter.AddReading(new Reading(DateTime.Now, 70));
            
            // Show readings
            Meter.ReadingHistory.Show(meter.GetReadings());

            // Calculate bill
            BillCalculator calc = new BillCalculator();
            decimal amount = calc.Calculate(meter.GetReadings());

            Console.WriteLine($"\nTotal Bill for {customer.Name}: ₹{amount}");
        }
    }
}


//QUESTION 10

using System;
using System.IO;

class Program
{
    static void Main(string[] args)
    {
        string filePath = "favorites.txt";

        // Write colors to file
        using (StreamWriter writer = new StreamWriter(filePath))
        {
            for (int i = 1; i <= 5; i++)
            {
                Console.Write($"Enter favorite color #{i}: ");
                string color = Console.ReadLine();
                writer.WriteLine(color);
            }
        }

        Console.WriteLine("\nReading colors from file:");
        
        // Read and display colors
        string[] colors = File.ReadAllLines(filePath);
        foreach (string color in colors)
        {
            Console.WriteLine(color);
        }
    }
}


//QUESTION 11

using System;
using System.Threading.Tasks;

class Program
{
    static async Task Main(string[] args)
    {
        await DownloadFileAsync();
    }

    static async Task DownloadFileAsync()
    {
        Console.WriteLine("Starting download...");
        await Task.Delay(5000); // Simulates a 5-second download
        Console.WriteLine("Download complete!");
    }
}
